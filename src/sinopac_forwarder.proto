syntax = "proto3";
package sinopac_forwarder;
import "google/protobuf/empty.proto";
option go_package = "./pb";

service SinopacForwarder {
    rpc GetServerToken(google.protobuf.Empty) returns (TokenResponse) {}

    rpc GetAllStockDetail(google.protobuf.Empty) returns (StockDetailResponse) {}
    rpc GetAllStockSnapshot(google.protobuf.Empty) returns (StockSnapshotResponse) {}
    rpc GetStockSnapshotTSE(google.protobuf.Empty) returns (StockSnapshotResponse) {}

    rpc GetStockTSEHistoryTick(Date) returns (StockHistoryTickResponse) {}
    rpc GetStockTSEHistoryKbar(Date) returns (StockHistoryKbarResponse) {}
    rpc GetStockTSEHistoryClose(Date) returns (StockHistoryCloseResponse) {}

    rpc GetStockVolumeRank(VolumeRankRequest) returns (StockVolumeRankResponse) {}

    rpc GetStockSnapshotByNumArr(StockNumArr) returns (StockSnapshotResponse) {}
    rpc GetStockHistoryTick(StockNumArrWithDate) returns (StockHistoryTickResponse) {}
    rpc GetStockHistoryKbar(StockNumArrWithDate) returns (StockHistoryKbarResponse) {}
    rpc GetStockHistoryClose(StockNumArrWithDate) returns (StockHistoryCloseResponse) {}
    rpc GetStockHistoryCloseByDateArr(StockNumArrWithDateArr) returns (StockHistoryCloseResponse) {}

    rpc SubscribeStockTick(StockNumArr) returns (SubscribeResponse) {}
    rpc SubscribeStockBidAsk(StockNumArr) returns (SubscribeResponse) {}
    rpc UnSubscribeStockTick(StockNumArr) returns (SubscribeResponse) {}
    rpc UnSubscribeStockBidAsk(StockNumArr) returns (SubscribeResponse) {}
}

service LongConeectionService {
    rpc EventChannel(google.protobuf.Empty) returns (stream EventResponse) {}
    rpc TickChannel(google.protobuf.Empty) returns (stream StockRealTimeTickResponse) {}
    rpc BidAskChannel(google.protobuf.Empty) returns (stream StockRealTimeBidAskResponse) {}
    rpc OrderStatusChannel(google.protobuf.Empty) returns (stream StockOrderStatus) {}
}

service TradeService {
    rpc BuyStock(StockOrderDetail) returns (TradeResult) {}
    rpc SellStock(StockOrderDetail) returns (TradeResult) {}
    rpc SellFirstStock(StockOrderDetail) returns (TradeResult) {}

    rpc CancelStock(OrderID) returns (TradeResult) {}
    rpc GetOrderStatusByID(OrderID) returns (TradeResult) {}

    rpc GetOrderStatusArr(google.protobuf.Empty) returns (StockOrderStatusArr) {}
    rpc GetNonBlockOrderStatusArr(google.protobuf.Empty) returns (FunctionErr) {}
}

message FunctionErr {
    string err = 1;
}

message OrderID {
    string order_id = 1;
    bool simulate   = 2;
}

message StockOrderDetail {
    string stock_num = 1;
    double price     = 2;
    int64 quantity   = 3;
    bool simulate    = 4;
}

message TradeResult {
    string order_id = 1;
    string status   = 2;
    string error    = 3;
}

message EventResponse {
    int64 resp_code  = 1;
    int64 event_code = 2;
    string info      = 3;
    string event     = 4;
}

message Date {
    string date = 1;
}

message TokenResponse {
    string token = 1;
}

message StockNumArr {
    repeated string stock_num_arr = 1;
}

message StockNumArrWithDate {
    repeated string stock_num_arr = 1;
    string date                   = 2;
}

message StockNumArrWithDateArr {
    repeated string stock_num_arr = 1;
    repeated string date_arr      = 2;
}

message StockDetailResponse {
    repeated StockDetailMessage stock = 1;
}

message StockDetailMessage {
    string exchange    = 1;
    string category    = 2;
    string code        = 3;
    string name        = 4;
    double reference   = 5;
    string update_date = 6;
    string day_trade   = 7;
}

message StockSnapshotResponse {
    repeated StockSnapshotMessage data = 1;
}

message StockSnapshotMessage {
    int64 ts                = 1;
    string code             = 2;
    string exchange         = 3;
    double open             = 4;
    double high             = 5;
    double low              = 6;
    double close            = 7;
    string tick_type        = 8;
    double change_price     = 9;
    double change_rate      = 10;
    string change_type      = 11;
    double average_price    = 12;
    int64 volume            = 13;
    int64 total_volume      = 14;
    int64 amount            = 15;
    int64 total_amount      = 16;
    double yesterday_volume = 17;
    double buy_price        = 18;
    double buy_volume       = 19;
    double sell_price       = 20;
    int64 sell_volume       = 21;
    double volume_ratio     = 22;
}

message StockHistoryTickResponse {
    repeated StockHistoryTickMessage data = 1;
}

message StockHistoryTickMessage {
    int64 ts         = 1;
    double close     = 2;
    int64 volume     = 3;
    double bid_price = 4;
    int64 bid_volume = 5;
    double ask_price = 6;
    int64 ask_volume = 7;
    int64 tick_type  = 8;
    string stock_num = 9;
}

message StockHistoryKbarResponse {
    repeated StockHistoryKbarMessage data = 1;
}

message StockHistoryKbarMessage {
    int64 ts         = 1;
    double Close     = 2;
    double Open      = 3;
    double High      = 4;
    double Low       = 5;
    int64 Volume     = 6;
    string stock_num = 7;
}

message StockHistoryCloseResponse {
    repeated StockHistoryCloseMessage data = 1;
}

message StockHistoryCloseMessage {
    string date  = 1;
    string code  = 2;
    double close = 3;
}

message VolumeRankRequest {
    int64 count = 1;
    string date = 2;
}

message StockVolumeRankResponse {
    repeated StockVolumeRankMessage data = 1;
}

message StockVolumeRankMessage {
    string date            = 1;
    string code            = 2;
    string name            = 3;
    int64 ts               = 4;
    double open            = 5;
    double high            = 6;
    double low             = 7;
    double close           = 8;
    double price_range     = 9;
    int64 tick_type        = 10;
    double change_price    = 11;
    int64 change_type      = 12;
    double average_price   = 13;
    int64 volume           = 14;
    int64 total_volume     = 15;
    int64 amount           = 16;
    int64 total_amount     = 17;
    int64 yesterday_volume = 18;
    double volume_ratio    = 19;
    double buy_price       = 20;
    int64 buy_volume       = 21;
    double sell_price      = 22;
    int64 sell_volume      = 23;
    int64 bid_orders       = 24;
    int64 bid_volumes      = 25;
    int64 ask_orders       = 26;
    int64 ask_volumes      = 27;
}

message SubscribeResponse {
    repeated string fail_arr = 1;
}

message StockRealTimeTickResponse {
    string code              = 1;
    string date_time         = 2;
    double open              = 3;
    double avg_price         = 4;
    double close             = 5;
    double high              = 6;
    double low               = 7;
    double amount            = 8;
    double total_amount      = 9;
    int64 volume             = 10;
    int64 total_volume       = 11;
    int64 tick_type          = 12;
    int64 chg_type           = 13;
    double price_chg         = 14;
    double pct_chg           = 15;
    int64 bid_side_total_vol = 16;
    int64 ask_side_total_vol = 17;
    int64 bid_side_total_cnt = 18;
    int64 ask_side_total_cnt = 19;
    int64 suspend            = 20;
    int64 simtrade           = 21;
}

message StockRealTimeBidAskResponse {
    string code                 = 1;
    string date_time            = 2;
    repeated double bid_price   = 3;
    repeated int64 bid_volume   = 4;
    repeated int64 diff_bid_vol = 5;
    repeated double ask_price   = 6;
    repeated int64 ask_volume   = 7;
    repeated int64 diff_ask_vol = 8;
    int64 suspend               = 9;
    int64 simtrade              = 10;
}

message StockOrderStatusArr {
    repeated StockOrderStatus data = 1;
}

message StockOrderStatus {
    string status     = 1;
    string code       = 2;
    string action     = 3;
    double price      = 4;
    int64 quantity    = 5;
    string order_id   = 6;
    string order_time = 7;
}
