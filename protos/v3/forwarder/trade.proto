syntax            = "proto3";
option go_package = "./pb";
package toc_python_forwarder;

import "google/protobuf/empty.proto";
import "entity.proto";

// TradeInterface is the interface for trade service
service TradeInterface {
    // BuyStock is the interface for buying stock
    rpc BuyStock(StockOrderDetail) returns (TradeResult) {}

    // SellStock is the interface for selling stock
    rpc SellStock(StockOrderDetail) returns (TradeResult) {}

    // SellFirstStock is the interface for selling first stock
    rpc SellFirstStock(StockOrderDetail) returns (TradeResult) {}

    // CancelStock is the interface for canceling stock
    rpc CancelStock(OrderID) returns (TradeResult) {}

    // BuyFuture is the interface for buying future
    rpc BuyFuture(FutureOrderDetail) returns (TradeResult) {}

    // SellFuture is the interface for selling future
    rpc SellFuture(FutureOrderDetail) returns (TradeResult) {}

    // SellFirstFuture is the interface for selling first future
    rpc SellFirstFuture(FutureOrderDetail) returns (TradeResult) {}

    // CancelFuture is the interface for canceling future
    rpc CancelFuture(FutureOrderID) returns (TradeResult) {}

    // BuyFuture is the interface for buying future
    rpc BuyOption(OptionOrderDetail) returns (TradeResult) {}

    // SellFuture is the interface for selling future
    rpc SellOption(OptionOrderDetail) returns (TradeResult) {}

    // SellFirstFuture is the interface for selling first future
    rpc SellFirstOption(OptionOrderDetail) returns (TradeResult) {}

    // CancelFuture is the interface for canceling future
    rpc CancelOption(OptionOrderID) returns (TradeResult) {}

    // GetLocalOrderStatusArr is the interface for getting local order status array
    rpc GetLocalOrderStatusArr(google.protobuf.Empty) returns (google.protobuf.Empty) {}

    // GetSimulateOrderStatusArr is the interface for getting simulate order status array
    rpc GetSimulateOrderStatusArr(google.protobuf.Empty) returns (google.protobuf.Empty) {}

    // GetOrderStatusByID is the interface for getting order status by id
    rpc GetOrderStatusByID(OrderID) returns (TradeResult) {}

    // GetNonBlockOrderStatusArr is the interface for getting non block order status array
    rpc GetNonBlockOrderStatusArr(google.protobuf.Empty) returns (ErrorMessage) {}

    // GetFuturePosition is the interface for getting future position
    rpc GetFuturePosition(google.protobuf.Empty) returns (FuturePositionArr) {}

    // GetStockPosition is the interface for getting stock position
    rpc GetStockPosition(google.protobuf.Empty) returns (StockPositionArr) {}

    // GetSettlement is the interface for getting settlement
    rpc GetSettlement(google.protobuf.Empty) returns (SettlementList) {}

    // GetAccountBalance is the interface for getting account balance
    rpc GetAccountBalance(google.protobuf.Empty) returns (AccountBalance) {}

    // GetMargin is the interface for getting margin
    rpc GetMargin(google.protobuf.Empty) returns (Margin) {}
}

// FuturePosition is the struct for future position
message FuturePosition {
    string code       = 1;
    string direction  = 2;
    int32 quantity    = 3;
    double price      = 4;
    double last_price = 5;
    double pnl        = 6;
}

// FuturePositionArr is the struct for future position array
message FuturePositionArr {
    repeated FuturePosition position_arr = 1;
}

// id (int): position id
// code (str): contract id
// direction (Action): action {Buy, Sell}
// quantity (int): quantity
// price (float): the average price
// last_price (float): last price
// pnl (float): unrealized profit
// yd_quantity (int): yesterday
// cond (StockOrderCond): Default Cash {Cash(現股), Netting(餘額交割), MarginTrading(融資),ShortSelling(融券), Emerging(興櫃)}
// margin_purchase_amount (int): margin_purchase_amount
// collateral (int): collateral
// short_sale_margin (int): short_sale_margin
// interest (int): interest
message StockPosition {
    int32 id                     = 1;
    string code                  = 2;
    Action direction             = 3;
    int32 quantity               = 4;
    double price                 = 5;
    double last_price            = 6;
    double pnl                   = 7;
    int32 yd_quantity            = 8;
    StockOrderCond cond          = 9;
    int32 margin_purchase_amount = 10;
    int32 collateral             = 11;
    int32 short_sale_margin      = 12;
    int32 interest               = 13;
}

// StockPositionArr is the struct for stock position array
message StockPositionArr {
    repeated StockPosition position_arr = 1;
}

// StockOrderDetail is the struct for stock order detail
message StockOrderDetail {
    string stock_num = 1;
    double price     = 2;
    int64 quantity   = 3;
    bool simulate    = 4;
}

// FutureOrderDetail is the struct for future order detail
message FutureOrderDetail {
    string code    = 1;
    double price   = 2;
    int64 quantity = 3;
    bool simulate  = 4;
}

// OptionOrderDetail is the struct for option order detail
message OptionOrderDetail {
    string code    = 1;
    double price   = 2;
    int64 quantity = 3;
    bool simulate  = 4;
}

// TradeResult is the struct for trade result
message TradeResult {
    string order_id = 1;
    string status   = 2;
    string error    = 3;
}

// OrderID is the struct for order id
message OrderID {
    string order_id = 1;
    bool simulate   = 2;
}

// FutureOrderID is the struct for future order id
message FutureOrderID {
    string order_id = 1;
    bool simulate   = 2;
}

// OptionOrderID is the struct for option order id
message OptionOrderID {
    string order_id = 1;
    bool simulate   = 2;
}

// status(FetchStatus): 資料回傳狀態
// yesterday_balance(float): 前日餘額
// today_balance(float): 今日餘額
// deposit_withdrawal(float): 存提
// fee(float): 手續費
// tax(float): 期交稅
// initial_margin(float): 原始保證金
// maintenance_margin(float): 維持保證金
// margin_call(float): 追繳保證金
// risk_indicator(float): 風險指標
// royalty_revenue_expenditure(float): 權利金收入與支出
// equity(float): 權益數
// equity_amount(float): 權益總值
// option_openbuy_market_value(float): 未沖銷買方選擇權市值
// option_opensell_market_value(float): 未沖銷賣方選擇權市值
// option_open_position(float): 參考未平倉選擇權損益
// option_settle_profitloss(float): 參考選擇權平倉損益
// future_open_position(float): 未沖銷期貨浮動損益
// today_future_open_position(float): 參考當日未沖銷期貨浮動損益
// future_settle_profitloss(float): 期貨平倉損益
// available_margin(float): 可動用(出金) 保證金
// plus_margin(float): 依「加收保證金指標」所加收之保證金
// plus_margin_indicator(float): 加收保證金指標
// security_collateral_amount(float): 有價證券抵繳總額
// order_margin_premium(float): 委託保證金及委託權利金
// collateral_amount(float): 有價品額
message Margin {
    string status                       = 1;
    double yesterday_balance            = 2;
    double today_balance                = 3;
    double deposit_withdrawal           = 4;
    double fee                          = 5;
    double tax                          = 6;
    double initial_margin               = 7;
    double maintenance_margin           = 8;
    double margin_call                  = 9;
    double risk_indicator               = 10;
    double royalty_revenue_expenditure  = 11;
    double equity                       = 12;
    double equity_amount                = 13;
    double option_openbuy_market_value  = 14;
    double option_opensell_market_value = 15;
    double option_open_position         = 16;
    double option_settle_profitloss     = 17;
    double future_open_position         = 18;
    double today_future_open_position   = 19;
    double future_settle_profitloss     = 20;
    double available_margin             = 21;
    double plus_margin                  = 22;
    double plus_margin_indicator        = 23;
    double security_collateral_amount   = 24;
    double order_margin_premium         = 25;
    double collateral_amount            = 26;
}

// status(FetchStatus): 資料回傳狀態
// acc_balance(float): 餘額
// date(str): 查詢日期
// errmsg(str): 錯誤訊息
message AccountBalance {
    string date    = 1;
    double balance = 2;
}

// date(datetime.date): 交割日期
// amount(float): 交割金額
// T(int): Tday
message Settlement {
    string date   = 1;
    double amount = 2;
}

message SettlementList {
    repeated Settlement settlement = 1;
}
